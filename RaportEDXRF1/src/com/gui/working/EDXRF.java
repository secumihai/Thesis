package com.gui.working;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */




import com.database.Account;
import com.database.EdxrfDB;
import com.database.ManageAccount;
import com.database.ManageEdxrfDB;
import com.gui.log.Loading;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cary60_1
 */
public class EDXRF extends javax.swing.JFrame implements Runnable {
    private int hour,minutes,seconds;
    private JFileChooser choesedFile;
    private List <String> tempList;
    List<Account> account;
    ManageEdxrfDB manageEdxrfDB;
    ManageAccount manageAccount;
    private Thread t=null;

    /**
     * Creates new form EDXRF
     */
    public EDXRF() {
        super("EDXRF");
        setResizable(false);
        initComponents();
        currentDate();
        t= new Thread(this);
        t.start();
        choesedFile = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        textArea.setText("Vă rugăm selectaţi Fişierul(erele) EDXRF...");
        manageEdxrfDB = new ManageEdxrfDB();
        manageAccount = new ManageAccount();
        account= manageAccount.listUsers(Loading.username);
        jTableData.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        showFiles();
    }

    public Optional<String> getExtensionByStringHandling(String filename) {
        return Optional.ofNullable(filename)
                .filter(f -> f.contains("."))
                .map(f -> f.substring(filename.lastIndexOf(".") + 1));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        openFileBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        deleteBtn = new javax.swing.JButton();
        uploadBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        uploadMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        backMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        closeMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        deleteMenuItem = new javax.swing.JMenuItem();
        updateMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        dateTxt = new javax.swing.JMenu();
        timeTxt = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Număr Fişier", "Nume Fişier"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableData);
        if (jTableData.getColumnModel().getColumnCount() > 0) {
            jTableData.getColumnModel().getColumn(0).setMinWidth(150);
            jTableData.getColumnModel().getColumn(0).setMaxWidth(500);
            jTableData.getColumnModel().getColumn(1).setResizable(false);
            jTableData.getColumnModel().getColumn(1).setPreferredWidth(5);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)), "Încărcarea Fişierelor EDXRF", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 24), new java.awt.Color(0, 102, 204))); // NOI18N

        openFileBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        openFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mouse.png"))); // NOI18N
        openFileBtn.setText("Alege Fişiererele....");
        openFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileBtnActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        deleteBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/file.png"))); // NOI18N
        deleteBtn.setText("Şterge Fişierul...");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        uploadBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        uploadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/upload.png"))); // NOI18N
        uploadBtn.setText("Încarcă Fişierele...");
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png"))); // NOI18N
        updateBtn.setText("Actualizare Date...");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        backBtn.setText("Meniul Principal");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(uploadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(uploadBtn)
                                        .addComponent(updateBtn))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteBtn))
                                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addComponent(openFileBtn))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(openFileBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        jMenu1.setForeground(new java.awt.Color(153, 0, 153));
        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        uploadMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/upload.png"))); // NOI18N
        uploadMenuItem.setText("Încarcă Fişierele...");
        uploadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(uploadMenuItem);
        jMenu1.add(jSeparator1);

        backMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        backMenuItem.setText("Înapoi la Meniul Principal");
        backMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(backMenuItem);
        jMenu1.add(jSeparator3);

        closeMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Close.png"))); // NOI18N
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setForeground(new java.awt.Color(153, 0, 153));
        jMenu2.setText("Edit");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        deleteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/file.png"))); // NOI18N
        deleteMenuItem.setText("Şterge Fişierele...");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(deleteMenuItem);

        updateMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png"))); // NOI18N
        updateMenuItem.setText("Actualizare Date");
        updateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(updateMenuItem);
        jMenu2.add(jSeparator2);

        jMenuBar1.add(jMenu2);

        dateTxt.setForeground(new java.awt.Color(153, 0, 153));
        dateTxt.setText("Data");
        dateTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuBar1.add(dateTxt);

        timeTxt.setForeground(new java.awt.Color(153, 0, 153));
        timeTxt.setText("Timpul");
        timeTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuBar1.add(timeTxt);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>


    private void openFileBtnActionPerformed(java.awt.event.ActionEvent evt) {

        String location = AppPrefs.FileLocation.get(System.getProperty("user.home"));
        choesedFile.setCurrentDirectory(new File(location));
        // allow multiple file selection
        choesedFile.setMultiSelectionEnabled(true);
        choesedFile.removeChoosableFileFilter(choesedFile.getAcceptAllFileFilter());

        FileFilter restrict = new OpenFileFilter("cantit");

        choesedFile.setFileFilter(restrict);



        // invoke the showsOpenDialog function to show the save dialog

        int r = choesedFile.showOpenDialog(null);


        if (r == JFileChooser.APPROVE_OPTION) {
            // get the selelcted files
            tempList = new ArrayList <String>();
            File files[] = choesedFile.getSelectedFiles();
            String[] names = new String[files.length];
            for (int i = 0; i < files.length; i++) {
                AppPrefs.FileLocation.put(files[i].getParentFile().getAbsolutePath());
                /// JOptionPane.showMessageDialog(null,getExtensionByStringHandling(files[i].getName()));
                if(files[i].getName().contains("cantit") && getExtensionByStringHandling(files[i].getName()).equals(Optional.empty())){
                    names[i] = files[i].getParentFile().getAbsolutePath()+"\\"+files[i].getName();
                }else{
                    textArea.setText("format gresit"+files[i].getName());
                }
            }

            Arrays.sort(names,new FilenameComparator());
            tempList.addAll(Arrays.asList(names));


            // set text to blank
            textArea.setText("Fişierul(erele) selectate:\n\n");


            // set the label to the path of the selected files
            for(int t=0;t<names.length;t++){
                String [] s = names[t].split(Pattern.quote("\\"));
                textArea.setText(textArea.getText() + "" + s[s.length-1]+"\n");
            }
            JOptionPane.showMessageDialog(null,"Acum încărcaţi în Baza de Date Fişierele Selectate. Apăsaţi pe butonul \"Încarcă Fişierele...\"");
            // if the user cancelled the operation
        }
        else{
            textArea.setText("nu a fost selectat nici un fişier");
        }

    }

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        int row= jTableData.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this, "Nu aţi selectat nici un Fişier",
                    "Lipsesc Date", JOptionPane.WARNING_MESSAGE);
        }else {
            String cell = jTableData.getModel().getValueAt(row, 1).toString();
            List<EdxrfDB> listOfEDXRF = manageEdxrfDB.listFiles(cell, Loading.username);
            try {
                Object[] options = {"Da", "Nu"};
                int n = JOptionPane.showOptionDialog(this,
                        "Doriţi să ştergeţi Fişierul " +cell+"?",
                        "Întrebare",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[1]);
                if(n==0) {
                    JOptionPane.showMessageDialog(null, "Fişierul "+cell+" a fost şters din Baza de Date!!!");
                    manageEdxrfDB.deleteFiles(listOfEDXRF.get(0).getEdxrfId());
                    showFiles();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setVisible(false);
        Home home = new Home();
        home.setVisible(true);
    }

    private void uploadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void updateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        showFiles();
    }

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        showFiles();
    }

    private void backMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setVisible(false);
        Home home = new Home();
        home.setVisible(true);
    }

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.exit(0);
    }

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try{
            for(String filePath:tempList){
                File file = new File(filePath);
                BufferedReader brTest = null;
                try {
                    brTest = new BufferedReader(new FileReader(file));
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(null,ex);
                }
                String text="";
                try {
                    text = brTest.readLine();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null,ex);
                }
                if(text.equals("Analysis report")){
                    String [] fileName = filePath.split(Pattern.quote("\\"));
                    if(manageEdxrfDB.listFiles(fileName[fileName.length-1],Loading.username).size()==0) {
                        manageEdxrfDB.addNewFile(fileName[fileName.length - 1], filePath, account.get(0));

                    }else{
                        JOptionPane.showMessageDialog(this, "Fişierul "+fileName[fileName.length-1]+"" +
                                        " a fost încărcat deja este în Baza de Date.",
                                "EROARE", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    String [] s = filePath.split(Pattern.quote("\\"));
                    JOptionPane.showMessageDialog(null,"Fişierul \""+s[s.length-1]+" \" nu este de tip EDXRF.Acesta nu va fi inclus în Baza de Date.");

                }
            }
        }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(null,"Nu aţi selectat nici un fişier pentru a fi încărcat sau Fişierele selectate sunt goale. Alegeţi iniţial un Fişier sau mai multe"
                    + " apăsând butonul de mai sus \"Alege Fişierele...\".");
        }
        tempList=null;
        textArea.setText("Actualizaţi datele. Apăsaţi butonul \"Actualizare Date...\"");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EDXRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EDXRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EDXRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EDXRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EDXRF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton backBtn;
    private javax.swing.JMenuItem backMenuItem;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenu dateTxt;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTable jTableData;
    private javax.swing.JButton openFileBtn;
    private javax.swing.JTextArea textArea;
    private javax.swing.JMenu timeTxt;
    private javax.swing.JButton updateBtn;
    private javax.swing.JMenuItem updateMenuItem;
    private javax.swing.JButton uploadBtn;
    private javax.swing.JMenuItem uploadMenuItem;
    // End of variables declaration

    @Override
    public void run() {
        try {
            while (true) {
                Calendar cal = new GregorianCalendar();
                seconds = cal.get(Calendar.SECOND);
                minutes = cal.get(Calendar.MINUTE);
                hour = cal.get(Calendar.HOUR);

                SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
                Date date = cal.getTime();
                String time = dateFormat.format(date);
                timeTxt.setText(" Ora: " + time);
                t.sleep(10);
            }
        }catch (Exception e){}
    }

    public void currentDate(){
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year =  cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        dateTxt.setText(String.format("Data : %02d/%02d/%04d",day,(month+1),year));


    }

    public void showFiles(){
        List<EdxrfDB> list = manageEdxrfDB.listOfFiles(Loading.username);
        DefaultTableModel model = (DefaultTableModel) jTableData.getModel();
        model.setRowCount(0);
        Object [] row = new Object[2];
        for (int i = 0; i <list.size() ; i++) {
            row[0]= (i+1);
            row[1] = list.get(i).getFileName();
            model.addRow(row);
        }
        jTableData.setModel(model);
        model.fireTableDataChanged();
    }
}

